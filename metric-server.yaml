---
apiVersion: "rbac.authorization.k8s.io/v1"
kind: "ClusterRole"
rules:
- apiGroups:
  - "certificates.k8s.io"
  nonResourceURLs: []
  resourceNames: []
  resources:
  - "certificatesigningrequests"
  verbs:
  - "list"
  - "watch"
- apiGroups:
  - ""
  nonResourceURLs: []
  resourceNames: []
  resources:
  - "configmaps"
  verbs:
  - "list"
  - "watch"
- apiGroups:
  - "batch"
  nonResourceURLs: []
  resourceNames: []
  resources:
  - "cronjobs"
  verbs:
  - "list"
  - "watch"
- apiGroups:
  - "extensions"
  - "apps"
  nonResourceURLs: []
  resourceNames: []
  resources:
  - "daemonsets"
  verbs:
  - "list"
  - "watch"
- apiGroups:
  - "extensions"
  - "apps"
  nonResourceURLs: []
  resourceNames: []
  resources:
  - "deployments"
  verbs:
  - "list"
  - "watch"
- apiGroups:
  - ""
  nonResourceURLs: []
  resourceNames: []
  resources:
  - "endpoints"
  verbs:
  - "list"
  - "watch"
- apiGroups:
  - "autoscaling"
  nonResourceURLs: []
  resourceNames: []
  resources:
  - "horizontalpodautoscalers"
  verbs:
  - "list"
  - "watch"
- apiGroups:
  - "extensions"
  - "networking.k8s.io"
  nonResourceURLs: []
  resourceNames: []
  resources:
  - "ingresses"
  verbs:
  - "list"
  - "watch"
- apiGroups:
  - "batch"
  nonResourceURLs: []
  resourceNames: []
  resources:
  - "jobs"
  verbs:
  - "list"
  - "watch"
- apiGroups:
  - "coordination.k8s.io"
  nonResourceURLs: []
  resourceNames: []
  resources:
  - "leases"
  verbs:
  - "list"
  - "watch"
- apiGroups:
  - ""
  nonResourceURLs: []
  resourceNames: []
  resources:
  - "limitranges"
  verbs:
  - "list"
  - "watch"
- apiGroups:
  - "admissionregistration.k8s.io"
  nonResourceURLs: []
  resourceNames: []
  resources:
  - "mutatingwebhookconfigurations"
  verbs:
  - "list"
  - "watch"
- apiGroups:
  - ""
  nonResourceURLs: []
  resourceNames: []
  resources:
  - "namespaces"
  verbs:
  - "list"
  - "watch"
- apiGroups:
  - "networking.k8s.io"
  nonResourceURLs: []
  resourceNames: []
  resources:
  - "networkpolicies"
  verbs:
  - "list"
  - "watch"
- apiGroups:
  - ""
  nonResourceURLs: []
  resourceNames: []
  resources:
  - "nodes"
  verbs:
  - "list"
  - "watch"
- apiGroups:
  - ""
  nonResourceURLs: []
  resourceNames: []
  resources:
  - "persistentvolumeclaims"
  verbs:
  - "list"
  - "watch"
- apiGroups:
  - ""
  nonResourceURLs: []
  resourceNames: []
  resources:
  - "persistentvolumes"
  verbs:
  - "list"
  - "watch"
- apiGroups:
  - "policy"
  nonResourceURLs: []
  resourceNames: []
  resources:
  - "poddisruptionbudgets"
  verbs:
  - "list"
  - "watch"
- apiGroups:
  - ""
  nonResourceURLs: []
  resourceNames: []
  resources:
  - "pods"
  verbs:
  - "list"
  - "watch"
- apiGroups:
  - "extensions"
  - "apps"
  nonResourceURLs: []
  resourceNames: []
  resources:
  - "replicasets"
  verbs:
  - "list"
  - "watch"
- apiGroups:
  - ""
  nonResourceURLs: []
  resourceNames: []
  resources:
  - "replicationcontrollers"
  verbs:
  - "list"
  - "watch"
- apiGroups:
  - ""
  nonResourceURLs: []
  resourceNames: []
  resources:
  - "resourcequotas"
  verbs:
  - "list"
  - "watch"
- apiGroups:
  - ""
  nonResourceURLs: []
  resourceNames: []
  resources:
  - "secrets"
  verbs:
  - "list"
  - "watch"
- apiGroups:
  - ""
  nonResourceURLs: []
  resourceNames: []
  resources:
  - "services"
  verbs:
  - "list"
  - "watch"
- apiGroups:
  - "apps"
  nonResourceURLs: []
  resourceNames: []
  resources:
  - "statefulsets"
  verbs:
  - "list"
  - "watch"
- apiGroups:
  - "storage.k8s.io"
  nonResourceURLs: []
  resourceNames: []
  resources:
  - "storageclasses"
  verbs:
  - "list"
  - "watch"
- apiGroups:
  - "admissionregistration.k8s.io"
  nonResourceURLs: []
  resourceNames: []
  resources:
  - "validatingwebhookconfigurations"
  verbs:
  - "list"
  - "watch"
- apiGroups:
  - "storage.k8s.io"
  nonResourceURLs: []
  resourceNames: []
  resources:
  - "volumeattachments"
  verbs:
  - "list"
  - "watch"
metadata:
  annotations: {}
  name: "my-prometheus-kube-state-metrics"
  labels:
    helm.sh/chart: "kube-state-metrics-4.24.0"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/name: "kube-state-metrics"
    app.kubernetes.io/part-of: "kube-state-metrics"
    app.kubernetes.io/instance: "my-prometheus"
    app.kubernetes.io/version: "2.7.0"
    app.kubernetes.io/component: "metrics"

---
apiVersion: "rbac.authorization.k8s.io/v1"
kind: "ClusterRoleBinding"
metadata:
  annotations: {}
  name: "my-prometheus-kube-state-metrics"
  labels:
    helm.sh/chart: "kube-state-metrics-4.24.0"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/name: "kube-state-metrics"
    app.kubernetes.io/part-of: "kube-state-metrics"
    app.kubernetes.io/instance: "my-prometheus"
    app.kubernetes.io/version: "2.7.0"
    app.kubernetes.io/component: "metrics"
subjects:
- kind: "ServiceAccount"
  name: "my-prometheus-kube-state-metrics"
  namespace: "nirmata-opencost"
roleRef:
  apiGroup: "rbac.authorization.k8s.io"
  kind: "ClusterRole"
  name: "my-prometheus-kube-state-metrics"

---
apiVersion: "v1"
kind: "ServiceAccount"
metadata:
  namespace: "nirmata-opencost"
  annotations: {}
  name: "my-prometheus-kube-state-metrics"
  labels:
    helm.sh/chart: "kube-state-metrics-4.24.0"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/name: "kube-state-metrics"
    app.kubernetes.io/part-of: "kube-state-metrics"
    app.kubernetes.io/instance: "my-prometheus"
    app.kubernetes.io/version: "2.7.0"
    app.kubernetes.io/component: "metrics"

---
kind: "Deployment"
apiVersion: "apps/v1"
metadata:
  namespace: "nirmata-opencost"
  annotations: {}
  name: "my-prometheus-kube-state-metrics"
  labels:
    helm.sh/chart: "kube-state-metrics-4.24.0"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/name: "kube-state-metrics"
    app.kubernetes.io/part-of: "kube-state-metrics"
    app.kubernetes.io/instance: "my-prometheus"
    app.kubernetes.io/version: "2.7.0"
    app.kubernetes.io/component: "metrics"
spec:
  replicas: 1
  revisionHistoryLimit: 5
  selector:
    matchLabels:
      app.kubernetes.io/name: "kube-state-metrics"
      app.kubernetes.io/instance: "my-prometheus"
    matchExpressions: []
  strategy:
    type: "RollingUpdate"
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      annotations: {}
      labels:
        helm.sh/chart: "kube-state-metrics-4.24.0"
        app.kubernetes.io/managed-by: "Helm"
        app.kubernetes.io/name: "kube-state-metrics"
        app.kubernetes.io/part-of: "kube-state-metrics"
        app.kubernetes.io/instance: "my-prometheus"
        app.kubernetes.io/version: "2.7.0"
        app.kubernetes.io/component: "metrics"
    spec:
      terminationGracePeriodSeconds: 30
      nodeSelector: {}
      serviceAccountName: "my-prometheus-kube-state-metrics"
      hostNetwork: false
      containers:
      - name: "kube-state-metrics"
        image: "registry.k8s.io/kube-state-metrics/kube-state-metrics:v2.7.0"
        command: []
        args:
        - "--port=8080"
        - "--resources=certificatesigningrequests,configmaps,cronjobs,daemonsets,deployments,endpoints,horizontalpodautoscalers,ingresses,jobs,leases,limitranges,mutatingwebhookconfigurations,namespaces,networkpolicies,nodes,persistentvolumeclaims,persistentvolumes,poddisruptionbudgets,pods,replicasets,replicationcontrollers,resourcequotas,secrets,services,statefulsets,storageclasses,validatingwebhookconfigurations,volumeattachments"
        imagePullPolicy: "IfNotPresent"
        ports:
        - name: "http"
          containerPort: 8080
          protocol: "TCP"
        livenessProbe:
          initialDelaySeconds: 5
          timeoutSeconds: 5
          periodSeconds: 10
          successThreshold: 1
          failureThreshold: 3
          httpGet:
            path: "/healthz"
            port: 8080
        readinessProbe:
          initialDelaySeconds: 5
          timeoutSeconds: 5
          periodSeconds: 10
          successThreshold: 1
          failureThreshold: 3
          httpGet:
            path: "/"
            port: 8080
      securityContext:
        runAsUser: 65534
        fsGroup: 65534
        runAsGroup: 65534
        supplementalGroups: []

---
apiVersion: "v1"
kind: "Service"
metadata:
  namespace: ""
  annotations:
    prometheus.io/scrape: "true"
  name: "my-prometheus-kube-state-metrics"
  labels:
    helm.sh/chart: "kube-state-metrics-4.24.0"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/name: "kube-state-metrics"
    app.kubernetes.io/part-of: "kube-state-metrics"
    app.kubernetes.io/instance: "my-prometheus"
    app.kubernetes.io/version: "2.7.0"
    app.kubernetes.io/component: "metrics"
spec:
  externalIPs: []
  loadBalancerSourceRanges: []
  type: "ClusterIP"
  selector:
    app.kubernetes.io/name: "kube-state-metrics"
    app.kubernetes.io/instance: "my-prometheus"
  ports:
  - name: "http"
    port: 8080
    protocol: "TCP"
    targetPort: 8080
