---
apiVersion: "v1"
kind: "ServiceAccount"
metadata:
  namespace: "nirmata-opencost"
  annotations: {}
  name: "my-prometheus-prometheus-node-exporter"
  labels:
    helm.sh/chart: "prometheus-node-exporter-4.8.0"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/name: "prometheus-node-exporter"
    app.kubernetes.io/part-of: "prometheus-node-exporter"
    app.kubernetes.io/instance: "my-prometheus"
    app.kubernetes.io/version: "1.5.0"
    app.kubernetes.io/component: "metrics"

---
apiVersion: "v1"
kind: "Service"
metadata:
  namespace: "nirmata-opencost"
  annotations:
    prometheus.io/scrape: "true"
  name: "my-prometheus-prometheus-node-exporter"
  labels:
    helm.sh/chart: "prometheus-node-exporter-4.8.0"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/name: "prometheus-node-exporter"
    app.kubernetes.io/part-of: "prometheus-node-exporter"
    app.kubernetes.io/instance: "my-prometheus"
    app.kubernetes.io/version: "1.5.0"
    app.kubernetes.io/component: "metrics"
spec:
  externalIPs: []
  loadBalancerSourceRanges: []
  type: "ClusterIP"
  selector:
    app.kubernetes.io/name: "prometheus-node-exporter"
    app.kubernetes.io/instance: "my-prometheus"
  ports:
  - name: "metrics"
    port: 9100
    protocol: "TCP"
    targetPort: 9100

---
apiVersion: "apps/v1"
kind: "DaemonSet"
metadata:
  namespace: "nirmata-opencost"
  annotations: {}
  name: "my-prometheus-prometheus-node-exporter"
  labels:
    helm.sh/chart: "prometheus-node-exporter-4.8.0"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/name: "prometheus-node-exporter"
    app.kubernetes.io/part-of: "prometheus-node-exporter"
    app.kubernetes.io/instance: "my-prometheus"
    app.kubernetes.io/version: "1.5.0"
    app.kubernetes.io/component: "metrics"
spec:
  minReadySeconds: 0
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/name: "prometheus-node-exporter"
      app.kubernetes.io/instance: "my-prometheus"
    matchExpressions: []
  template:
    metadata:
      annotations:
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        helm.sh/chart: "prometheus-node-exporter-4.8.0"
        app.kubernetes.io/managed-by: "Helm"
        app.kubernetes.io/name: "prometheus-node-exporter"
        app.kubernetes.io/part-of: "prometheus-node-exporter"
        app.kubernetes.io/instance: "my-prometheus"
        app.kubernetes.io/version: "1.5.0"
        app.kubernetes.io/component: "metrics"
    spec:
      terminationGracePeriodSeconds: 30
      nodeSelector: {}
      serviceAccountName: "my-prometheus-prometheus-node-exporter"
      automountServiceAccountToken: false
      hostNetwork: true
      hostPID: true
      volumes:
      - name: "proc"
        hostPath:
          path: "/proc"
      - name: "sys"
        hostPath:
          path: "/sys"
      - name: "root"
        hostPath:
          path: "/"
      containers:
      - name: "node-exporter"
        image: "quay.io/prometheus/node-exporter:v1.5.0"
        command: []
        args:
        - "--path.procfs=/host/proc"
        - "--path.sysfs=/host/sys"
        - "--path.rootfs=/host/root"
        - "--web.listen-address=[$(HOST_IP)]:9100"
        imagePullPolicy: "IfNotPresent"
        ports:
        - name: "metrics"
          containerPort: 9100
          protocol: "TCP"
        env:
        - name: "HOST_IP"
          value: "0.0.0.0"
        volumeMounts:
        - name: "proc"
          readOnly: true
          mountPath: "/host/proc"
        - name: "sys"
          readOnly: true
          mountPath: "/host/sys"
        - mountPropagation: "HostToContainer"
          name: "root"
          readOnly: true
          mountPath: "/host/root"
        livenessProbe:
          initialDelaySeconds: 0
          timeoutSeconds: 1
          periodSeconds: 10
          successThreshold: 1
          failureThreshold: 3
          httpGet:
            path: "/"
            port: 9100
            scheme: "HTTP"
        readinessProbe:
          initialDelaySeconds: 0
          timeoutSeconds: 1
          periodSeconds: 10
          successThreshold: 1
          failureThreshold: 3
          httpGet:
            path: "/"
            port: 9100
            scheme: "HTTP"
        securityContext:
          allowPrivilegeEscalation: false
      securityContext:
        runAsUser: 65534
        runAsNonRoot: true
        fsGroup: 65534
        runAsGroup: 65534
        supplementalGroups: []
      tolerations:
      - operator: "Exists"
        effect: "NoSchedule"
  updateStrategy:
    type: "RollingUpdate"
    rollingUpdate:
      maxUnavailable: 1
